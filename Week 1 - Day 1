#Problem - 1st 
#Set Matrix Zeros

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> vrow, vcol;
        vector<int>:: iterator it1, it2;
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j] == 0){
                    vrow.push_back(i);
                    vcol.push_back(j);
                }
            }
        }
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                it1 = find(vrow.begin(), vrow.end(),i);
                it2 = find(vcol.begin(), vcol.end(), j);
                if(it1 != vrow.end() || it2 != vcol.end()){
                    matrix[i][j] = 0;
                }
            }
        }
        
    }
};


#Problem - 2nd
#Pascal's Triangle

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        int n = numRows;
        vector<vector<int>> ans;
        
        vector<int>st;
        st.push_back(1);
        ans.push_back(st);
        if(n == 1){
            return ans;
        }
        vector<int>st2;
        if(n >= 2){            
            st2.push_back(1);     
            st2.push_back(1);
        }
        ans.push_back(st2);
        
        if(n ==2 ) return ans;
        int s = 3;
        while(s <= n){
            vector<int> temp;
            temp = ans.back();
            vector<int> curr;
            
            for(int i=0; i<s; i++){
                if(i == 0 || i == s-1){
                    curr.push_back(1);
                }
                else{
                    curr.push_back(temp[i-1] + temp[i]);
                }
            }
            ans.push_back(curr);
            s++;
        }
        
        return ans;
    }
};


#Problem - 3
#Next Permutation

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
    
        next_permutation(nums.begin(), nums.end());
        
    }
};


#Problem - 4
#Kaddane's Algorithm

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        int ans = nums[0];
        
        for(int i=0; i<n; i++){
            sum += nums[i];
            
            if(sum <= 0){
                ans = max(ans, sum);
                sum = 0;
            }
            
            else{
                ans = max(ans, sum);
            }
        }        
        return ans;
    }
};


#Problem - 5
#Sort Colors

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        map<int, int> mp;
        
        for(int i=0; i<n; i++){
            mp[nums[i]]++;
        }
        
        for(int i=0; i<n; i++){
            if(mp[0] != 0){
                nums[i] = 0;
                mp[0]--;
            }
            else if(mp[1] != 0){
                nums[i] = 1;
                mp[1]--;
            }
            else{
                nums[i] = 2;
                mp[2]--;
            }
        }
    }
};


#Problem - 6
#Stock Buy and Sell 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mini = INT_MAX;
        int n = prices.size();
        vector<int> temp;
        
        for(int i=0; i<n; i++){
            mini = min(mini, prices[i]);
            temp.push_back(prices[i] - mini);            
        }
        
        int ans = *max_element(temp.begin(), temp.end());
        return ans;       

    }
};
